apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[]'
    capabilities: Basic Install
    categories: Integration & Delivery
    containerImage: quay.io/3scale/saas-operator
    createdAt: 2020-06-02T15:49:31GMT
    description: |-
      The 3scale SaaS Operator creates and maintains a SaaS-ready deployment
      of the Red Hat 3scale API Management on OpenShift.
    operators.operatorframework.io/builder: operator-sdk-v1.3.0
    operators.operatorframework.io/project_layout: ansible.sdk.operatorframework.io/v1
    repository: https://github.com/3scale/saas-operator
    support: Red Hat
  name: saas-operator.v0.0.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: Backend is the Schema for the backends API
      displayName: Backend
      kind: Backend
      name: backends.saas.3scale.net
      specDescriptors:
      - description: Application specific configuration options for the component
        displayName: Config
        path: config
      - description: A reference to the secret holding the backend-error-monitoring key
        displayName: Error Monitoring Key
        path: config.errorMonitoringKey
      - description: A reference to the secret holding the backend-error-monitoring service
        displayName: Error Monitoring Service
        path: config.errorMonitoringService
      - description: A reference to the secret holding the backend-internal-api password
        displayName: Internal APIPassword
        path: config.internalAPIPassword
      - description: A reference to the secret holding the backend-internal-api user
        displayName: Internal APIUser
        path: config.internalAPIUser
      - description: Master service account ID in Porta
        displayName: Master Service ID
        path: config.masterServiceID
      - description: Rack environment
        displayName: Rack Env
        path: config.rackEnv
      - description: Redis Queues DSN
        displayName: Redis Queues DSN
        path: config.redisQueuesDSN
      - description: Redis Storage DSN
        displayName: Redis Storage DSN
        path: config.redisStorageDSN
      - description: A reference to the secret holding the backend-system-events-hook password
        displayName: System Events Hook Password
        path: config.systemEventsHookPassword
      - description: A reference to the secret holding the backend-system-events-hook URL
        displayName: System Events Hook URL
        path: config.systemEventsHookURL
      - description: Configures the backend cron
        displayName: Cron
        path: cron
      - description: Number of replicas for the component
        displayName: Replicas
        path: cron.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: cron.resources
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Configures the backend listener
        displayName: Listener
        path: listener
      - description: Listener specific configuration options for the component element
        displayName: Config
        path: listener.config
      - description: Enable (true) or disable (false) Legacy Referrer Filters
        displayName: Legacy Referrer Filters
        path: listener.config.legacyReferrerFilters
      - description: Number of worker processes per listener pod
        displayName: Listener Workers
        path: listener.config.listenerWorkers
      - description: Listener log format
        displayName: Log Format
        path: listener.config.logFormat
      - description: Enable (true) or disable (false) listener redis async mode
        displayName: Redis Async
        path: listener.config.redisAsync
      - description: The external endpoint/s for the component
        displayName: Endpoint
        path: listener.endpoint
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: listener.hpa
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: listener.livenessProbe
      - description: Configures the AWS Network load balancer for the component
        displayName: Load Balancer
        path: listener.loadBalancer
      - description: Marin3r configures the Marin3r sidecars for the component
        displayName: Marin3r
        path: listener.marin3r
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: listener.pdb
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: listener.readinessProbe
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: listener.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: listener.resources
      - description: Configures the backend worker
        displayName: Worker
        path: worker
      - description: Listener specific configuration options for the component element
        displayName: Config
        path: worker.config
      - description: Worker log format
        displayName: Log Format
        path: worker.config.logFormat
      - description: Enable (true) or disable (false) worker redis async mode
        displayName: Redis Async
        path: worker.config.redisAsync
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: worker.hpa
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: worker.livenessProbe
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: worker.pdb
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: worker.readinessProbe
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: worker.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: worker.resources
      version: ""
    - description: Apicast is the Schema for the apicasts API
      displayName: Apicast
      kind: Apicast
      name: apicasts.saas.3scale.net
      specDescriptors:
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Configures the production Apicast environment
        displayName: Production
        path: production
      - description: Application specific configuration options for the component
        displayName: Config
        path: production.config
      - description: Apicast configurations cache TTL
        displayName: Configuration Cache
        path: production.config.configurationCache
      - description: Openresty log level
        displayName: Log Level
        path: production.config.logLevel
      - description: OpenID Connect integration log level
        displayName: OIDCLog Level
        path: production.config.oidcLogLevel
      - description: Endpoint to request proxy configurations to
        displayName: Threescale Portal Endpoint
        path: production.config.threescalePortalEndpoint
      - description: The external endpoint/s for the component
        displayName: Endpoint
        path: production.endpoint
      - description: The list of dns records that will point to the component
        displayName: DNS
        path: production.endpoint.dns
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: production.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: production.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: production.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: production.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: production.hpa.resourceUtilization
      - description: Image specification for the component
        displayName: Image
        path: production.image
      - description: Docker repository of the image
        displayName: Name
        path: production.image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: production.image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: production.image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: production.image.tag
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: production.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: production.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: production.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: production.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: production.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: production.livenessProbe.timeoutSeconds
      - description: Configures the AWS load balancer for the component
        displayName: Load Balancer
        path: production.loadBalancer
      - description: Enables/disables connection draining
        displayName: Connection Draining Enabled
        path: production.loadBalancer.connectionDrainingEnabled
      - description: Sets the timeout for connection draining
        displayName: Connection Draining Timeout
        path: production.loadBalancer.connectionDrainingTimeout
      - description: Enables/disables cross zone load balancing
        displayName: Cross Zone Load Balancing Enabled
        path: production.loadBalancer.crossZoneLoadBalancingEnabled
      - description: Sets the healthy threshold for the load balancer
        displayName: Healthcheck Healthy Threshold
        path: production.loadBalancer.healthcheckHealthyThreshold
      - description: Sets the interval between health checks
        displayName: Healthcheck Interval
        path: production.loadBalancer.healthcheckInterval
      - description: Sets the timeout for the health check
        displayName: Healthcheck Timeout
        path: production.loadBalancer.healthcheckTimeout
      - description: Sets the unhealthy threshold for the load balancer
        displayName: Healthcheck Unhealthy Threshold
        path: production.loadBalancer.healthcheckUnhealthyThreshold
      - description: Enables/disbles use of proxy protocol in the load balancer
        displayName: Proxy Protocol
        path: production.loadBalancer.proxyProtocol
      - description: Marin3r configures the Marin3r sidecars for the component
        displayName: Marin3r
        path: production.marin3r
      - description: Extra annotations to pass the Pod to further configure the sidecar container.
        displayName: Extra Pod Annotations
        path: production.marin3r.extraPodAnnotations
      - description: The ports that the sidecar exposes
        displayName: Ports
        path: production.marin3r.ports
      - description: Port name
        displayName: Name
        path: production.marin3r.ports[0].name
      - description: Port value
        displayName: Port
        path: production.marin3r.ports[0].port
      - description: Compute Resources required by this container.
        displayName: Resources
        path: production.marin3r.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: production.marin3r.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: production.marin3r.resources.requests
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: production.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: production.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: production.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: production.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: production.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: production.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: production.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: production.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: production.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: production.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: production.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: production.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: production.resources.requests
      - description: Configures the staging Apicast environment
        displayName: Staging
        path: staging
      - description: Application specific configuration options for the component
        displayName: Config
        path: staging.config
      - description: Apicast configurations cache TTL
        displayName: Configuration Cache
        path: staging.config.configurationCache
      - description: Openresty log level
        displayName: Log Level
        path: staging.config.logLevel
      - description: OpenID Connect integration log level
        displayName: OIDCLog Level
        path: staging.config.oidcLogLevel
      - description: Endpoint to request proxy configurations to
        displayName: Threescale Portal Endpoint
        path: staging.config.threescalePortalEndpoint
      - description: The external endpoint/s for the component
        displayName: Endpoint
        path: staging.endpoint
      - description: The list of dns records that will point to the component
        displayName: DNS
        path: staging.endpoint.dns
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: staging.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: staging.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: staging.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: staging.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: staging.hpa.resourceUtilization
      - description: Image specification for the component
        displayName: Image
        path: staging.image
      - description: Docker repository of the image
        displayName: Name
        path: staging.image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: staging.image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: staging.image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: staging.image.tag
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: staging.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: staging.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: staging.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: staging.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: staging.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: staging.livenessProbe.timeoutSeconds
      - description: Configures the AWS load balancer for the component
        displayName: Load Balancer
        path: staging.loadBalancer
      - description: Enables/disables connection draining
        displayName: Connection Draining Enabled
        path: staging.loadBalancer.connectionDrainingEnabled
      - description: Sets the timeout for connection draining
        displayName: Connection Draining Timeout
        path: staging.loadBalancer.connectionDrainingTimeout
      - description: Enables/disables cross zone load balancing
        displayName: Cross Zone Load Balancing Enabled
        path: staging.loadBalancer.crossZoneLoadBalancingEnabled
      - description: Sets the healthy threshold for the load balancer
        displayName: Healthcheck Healthy Threshold
        path: staging.loadBalancer.healthcheckHealthyThreshold
      - description: Sets the interval between health checks
        displayName: Healthcheck Interval
        path: staging.loadBalancer.healthcheckInterval
      - description: Sets the timeout for the health check
        displayName: Healthcheck Timeout
        path: staging.loadBalancer.healthcheckTimeout
      - description: Sets the unhealthy threshold for the load balancer
        displayName: Healthcheck Unhealthy Threshold
        path: staging.loadBalancer.healthcheckUnhealthyThreshold
      - description: Enables/disbles use of proxy protocol in the load balancer
        displayName: Proxy Protocol
        path: staging.loadBalancer.proxyProtocol
      - description: Marin3r configures the Marin3r sidecars for the component
        displayName: Marin3r
        path: staging.marin3r
      - description: Extra annotations to pass the Pod to further configure the sidecar container.
        displayName: Extra Pod Annotations
        path: staging.marin3r.extraPodAnnotations
      - description: The ports that the sidecar exposes
        displayName: Ports
        path: staging.marin3r.ports
      - description: Port name
        displayName: Name
        path: staging.marin3r.ports[0].name
      - description: Port value
        displayName: Port
        path: staging.marin3r.ports[0].port
      - description: Compute Resources required by this container.
        displayName: Resources
        path: staging.marin3r.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: staging.marin3r.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: staging.marin3r.resources.requests
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: staging.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: staging.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: staging.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: staging.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: staging.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: staging.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: staging.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: staging.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: staging.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: staging.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: staging.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: staging.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: staging.resources.requests
      version: v1alpha1
    - description: AutoSSL is the Schema for the autossls API
      displayName: Auto SSL
      kind: AutoSSL
      name: autossls.saas.3scale.net
      specDescriptors:
      - description: Application specific configuration options for the component
        displayName: Config
        path: config
      - description: Enables/disables the Let's Encrypt staging ACME endpoint
        displayName: ACMEStaging
        path: config.acmeStaging
      - description: Defines an email address for Let's Encrypt notifications
        displayName: Contact Email
        path: config.contactEmail
      - description: List of domains that will never get autogenerated certificates
        displayName: Domain Blacklist
        path: config.domainBlacklist
      - description: List of domains that will bypass domain verification
        displayName: Domain Whitelist
        path: config.domainWhitelist
      - description: Sets the nginx log level
        displayName: Log Level
        path: config.logLevel
      - description: The endpoint to proxy_pass requests to
        displayName: Proxy Endpoint
        path: config.proxyEndpoint
      - description: Host for the redis database to store certificates
        displayName: Redis Host
        path: config.redisHost
      - description: Port for the redis database to store certificates
        displayName: Redis Port
        path: config.redisPort
      - description: The endpoint used to validate if certificate generation is allowed for the domain
        displayName: Verification Endpoint
        path: config.verificationEndpoint
      - description: The external endpoint/s for the component
        displayName: Endpoint
        path: endpoint
      - description: The list of dns records that will point to the component
        displayName: DNS
        path: endpoint.dns
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: hpa.resourceUtilization
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: livenessProbe.timeoutSeconds
      - description: Configures the AWS load balancer for the component
        displayName: Load Balancer
        path: loadBalancer
      - description: Enables/disables connection draining
        displayName: Connection Draining Enabled
        path: loadBalancer.connectionDrainingEnabled
      - description: Sets the timeout for connection draining
        displayName: Connection Draining Timeout
        path: loadBalancer.connectionDrainingTimeout
      - description: Enables/disables cross zone load balancing
        displayName: Cross Zone Load Balancing Enabled
        path: loadBalancer.crossZoneLoadBalancingEnabled
      - description: Sets the healthy threshold for the load balancer
        displayName: Healthcheck Healthy Threshold
        path: loadBalancer.healthcheckHealthyThreshold
      - description: Sets the interval between health checks
        displayName: Healthcheck Interval
        path: loadBalancer.healthcheckInterval
      - description: Sets the timeout for the health check
        displayName: Healthcheck Timeout
        path: loadBalancer.healthcheckTimeout
      - description: Sets the unhealthy threshold for the load balancer
        displayName: Healthcheck Unhealthy Threshold
        path: loadBalancer.healthcheckUnhealthyThreshold
      - description: Enables/disbles use of proxy protocol in the load balancer
        displayName: Proxy Protocol
        path: loadBalancer.proxyProtocol
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: resources.requests
      version: v1alpha1
    - description: Backend is the Schema for the backends API
      displayName: Backend
      kind: Backend
      name: backends.saas.3scale.net
      specDescriptors:
      - description: Application specific configuration options for the component
        displayName: Config
        path: config
      - description: A reference to the secret holding the backend-error-monitoring key
        displayName: Error Monitoring Key
        path: config.errorMonitoringKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.errorMonitoringKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.errorMonitoringKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.errorMonitoringKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.errorMonitoringKey.override
      - description: A reference to the secret holding the backend-error-monitoring service
        displayName: Error Monitoring Service
        path: config.errorMonitoringService
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.errorMonitoringService.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.errorMonitoringService.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.errorMonitoringService.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.errorMonitoringService.override
      - description: A reference to the secret holding the backend-internal-api password
        displayName: Internal APIPassword
        path: config.internalAPIPassword
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.internalAPIPassword.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.internalAPIPassword.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.internalAPIPassword.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.internalAPIPassword.override
      - description: A reference to the secret holding the backend-internal-api user
        displayName: Internal APIUser
        path: config.internalAPIUser
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.internalAPIUser.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.internalAPIUser.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.internalAPIUser.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.internalAPIUser.override
      - description: Master service account ID in Porta
        displayName: Master Service ID
        path: config.masterServiceID
      - description: Rack environment
        displayName: Rack Env
        path: config.rackEnv
      - description: Redis Queues DSN
        displayName: Redis Queues DSN
        path: config.redisQueuesDSN
      - description: Redis Storage DSN
        displayName: Redis Storage DSN
        path: config.redisStorageDSN
      - description: A reference to the secret holding the backend-system-events-hook password
        displayName: System Events Hook Password
        path: config.systemEventsHookPassword
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.systemEventsHookPassword.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.systemEventsHookPassword.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.systemEventsHookPassword.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.systemEventsHookPassword.override
      - description: A reference to the secret holding the backend-system-events-hook URL
        displayName: System Events Hook URL
        path: config.systemEventsHookURL
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.systemEventsHookURL.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.systemEventsHookURL.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.systemEventsHookURL.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.systemEventsHookURL.override
      - description: Configures the backend cron
        displayName: Cron
        path: cron
      - description: Number of replicas for the component
        displayName: Replicas
        path: cron.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: cron.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: cron.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: cron.resources.requests
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Configures the backend listener
        displayName: Listener
        path: listener
      - description: Listener specific configuration options for the component element
        displayName: Config
        path: listener.config
      - description: Enable (true) or disable (false) Legacy Referrer Filters
        displayName: Legacy Referrer Filters
        path: listener.config.legacyReferrerFilters
      - description: Number of worker processes per listener pod
        displayName: Listener Workers
        path: listener.config.listenerWorkers
      - description: Listener log format
        displayName: Log Format
        path: listener.config.logFormat
      - description: Enable (true) or disable (false) listener redis async mode
        displayName: Redis Async
        path: listener.config.redisAsync
      - description: The external endpoint/s for the component
        displayName: Endpoint
        path: listener.endpoint
      - description: The list of dns records that will point to the component
        displayName: DNS
        path: listener.endpoint.dns
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: listener.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: listener.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: listener.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: listener.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: listener.hpa.resourceUtilization
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: listener.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: listener.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: listener.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: listener.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: listener.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: listener.livenessProbe.timeoutSeconds
      - description: Configures the AWS Network load balancer for the component
        displayName: Load Balancer
        path: listener.loadBalancer
      - description: Enables/disables cross zone load balancing
        displayName: Cross Zone Load Balancing Enabled
        path: listener.loadBalancer.crossZoneLoadBalancingEnabled
      - description: The list of optional Elastic IPs allocations
        displayName: EIPAllocations
        path: listener.loadBalancer.eipAllocations
      - description: Enables/disbles use of proxy protocol in the load balancer
        displayName: Proxy Protocol
        path: listener.loadBalancer.proxyProtocol
      - description: Marin3r configures the Marin3r sidecars for the component
        displayName: Marin3r
        path: listener.marin3r
      - description: Extra annotations to pass the Pod to further configure the sidecar container.
        displayName: Extra Pod Annotations
        path: listener.marin3r.extraPodAnnotations
      - description: The ports that the sidecar exposes
        displayName: Ports
        path: listener.marin3r.ports
      - description: Port name
        displayName: Name
        path: listener.marin3r.ports[0].name
      - description: Port value
        displayName: Port
        path: listener.marin3r.ports[0].port
      - description: Compute Resources required by this container.
        displayName: Resources
        path: listener.marin3r.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: listener.marin3r.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: listener.marin3r.resources.requests
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: listener.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: listener.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: listener.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: listener.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: listener.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: listener.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: listener.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: listener.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: listener.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: listener.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: listener.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: listener.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: listener.resources.requests
      - description: Configures the backend worker
        displayName: Worker
        path: worker
      - description: Listener specific configuration options for the component element
        displayName: Config
        path: worker.config
      - description: Worker log format
        displayName: Log Format
        path: worker.config.logFormat
      - description: Enable (true) or disable (false) worker redis async mode
        displayName: Redis Async
        path: worker.config.redisAsync
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: worker.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: worker.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: worker.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: worker.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: worker.hpa.resourceUtilization
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: worker.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: worker.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: worker.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: worker.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: worker.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: worker.livenessProbe.timeoutSeconds
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: worker.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: worker.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: worker.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: worker.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: worker.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: worker.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: worker.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: worker.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: worker.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: worker.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: worker.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: worker.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: worker.resources.requests
      version: v1alpha1
    - description: CORSProxy is the Schema for the corsproxies API
      displayName: CORSProxy
      kind: CORSProxy
      name: corsproxies.saas.3scale.net
      specDescriptors:
      - description: Application specific configuration options for the component
        displayName: Config
        path: config
      - description: System database connection string
        displayName: System Database DSN
        path: config.systemDatabaseDSN
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.systemDatabaseDSN.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.systemDatabaseDSN.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.systemDatabaseDSN.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.systemDatabaseDSN.override
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: hpa.resourceUtilization
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: livenessProbe.timeoutSeconds
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: resources.requests
      version: v1alpha1
    - description: EchoAPI is the Schema for the echoapis API
      displayName: Echo API
      kind: EchoAPI
      name: echoapis.saas.3scale.net
      specDescriptors:
      - description: The external endpoint/s for the component
        displayName: Endpoint
        path: endpoint
      - description: The list of dns records that will point to the component
        displayName: DNS
        path: endpoint.dns
      - description: Resource requirements for the component
        displayName: HPA
        path: hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: hpa.resourceUtilization
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: livenessProbe.timeoutSeconds
      - description: Configures the AWS Network load balancer for the component
        displayName: Load Balancer
        path: loadBalancer
      - description: Enables/disables cross zone load balancing
        displayName: Cross Zone Load Balancing Enabled
        path: loadBalancer.crossZoneLoadBalancingEnabled
      - description: The list of optional Elastic IPs allocations
        displayName: EIPAllocations
        path: loadBalancer.eipAllocations
      - description: Enables/disbles use of proxy protocol in the load balancer
        displayName: Proxy Protocol
        path: loadBalancer.proxyProtocol
      - description: Marin3r configures the Marin3r sidecars for the component
        displayName: Marin3r
        path: marin3r
      - description: Extra annotations to pass the Pod to further configure the sidecar container.
        displayName: Extra Pod Annotations
        path: marin3r.extraPodAnnotations
      - description: The ports that the sidecar exposes
        displayName: Ports
        path: marin3r.ports
      - description: Port name
        displayName: Name
        path: marin3r.ports[0].name
      - description: Port value
        displayName: Port
        path: marin3r.ports[0].port
      - description: Compute Resources required by this container.
        displayName: Resources
        path: marin3r.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: marin3r.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: marin3r.resources.requests
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: PDB
        path: pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: readinessProbe.timeoutSeconds
      - description: Configures the Grafana Dashboard for the component
        displayName: Replicas
        path: replicas
      - description: Horizontal Pod Autoscaler for the component
        displayName: Resources
        path: resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: resources.requests
      version: v1alpha1
    - description: MappingService is the Schema for the mappingservices API
      displayName: Mapping Service
      kind: MappingService
      name: mappingservices.saas.3scale.net
      specDescriptors:
      - description: Application specific configuration options for the component
        displayName: Config
        path: config
      - description: System endpoint to fetch proxy configs from
        displayName: APIHost
        path: config.apiHost
      - description: Openresty log level
        displayName: Log Level
        path: config.logLevel
      - description: Base domain to replace the proxy configs base domain
        displayName: Preview Base Domain
        path: config.previewBaseDomain
      - description: A reference to the secret holding the system admin token
        displayName: System Admin Token
        path: config.systemAdminToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.systemAdminToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.systemAdminToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.systemAdminToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.systemAdminToken.override
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: hpa.resourceUtilization
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: livenessProbe.timeoutSeconds
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: resources.requests
      version: v1alpha1
    - description: System is the Schema for the systems API
      displayName: System
      kind: System
      name: systems.saas.3scale.net
      specDescriptors:
      - description: Application specific configuration options
        displayName: App
        path: app
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: app.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: app.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: app.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: app.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: app.hpa.resourceUtilization
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: app.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: app.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: app.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: app.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: app.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: app.livenessProbe.timeoutSeconds
      - description: Marin3r configures the Marin3r sidecars for the component
        displayName: Marin3r
        path: app.marin3r
      - description: Extra annotations to pass the Pod to further configure the sidecar container.
        displayName: Extra Pod Annotations
        path: app.marin3r.extraPodAnnotations
      - description: The ports that the sidecar exposes
        displayName: Ports
        path: app.marin3r.ports
      - description: Port name
        displayName: Name
        path: app.marin3r.ports[0].name
      - description: Port value
        displayName: Port
        path: app.marin3r.ports[0].port
      - description: Compute Resources required by this container.
        displayName: Resources
        path: app.marin3r.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: app.marin3r.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: app.marin3r.resources.requests
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: app.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: app.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: app.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: app.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: app.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: app.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: app.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: app.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: app.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: app.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: app.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: app.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: app.resources.requests
      - description: Application specific configuration options for System components
        displayName: Config
        path: config
      - description: AccessCode to protect admin urls
        displayName: Access Code
        path: config.accessCode
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.accessCode.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.accessCode.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.accessCode.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.accessCode.override
      - description: AMP release number
        displayName: AMPRelease
        path: config.ampRelease
      - description: AWS access key
        displayName: Access Key
        path: config.assets.accessKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.assets.accessKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.assets.accessKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.assets.accessKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.assets.accessKey.override
      - description: AWS S3 bucket name
        displayName: Bucket
        path: config.assets.bucket
      - description: AWS S3 region
        displayName: Region
        path: config.assets.region
      - description: AWS secret access key
        displayName: Secret Key
        path: config.assets.secretKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.assets.secretKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.assets.secretKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.assets.secretKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.assets.secretKey.override
      - description: Backend has configuration options for system to contact backend
        displayName: Backend
        path: config.backend
      - description: External endpoint
        displayName: External Endpoint
        path: config.backend.externalEndpoint
      - description: Internal API password
        displayName: Internal APIPassword
        path: config.backend.internalAPIPassword
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.backend.internalAPIPassword.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.backend.internalAPIPassword.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.backend.internalAPIPassword.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.backend.internalAPIPassword.override
      - description: Internal API user
        displayName: Internal APIUser
        path: config.backend.internalAPIUser
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.backend.internalAPIUser.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.backend.internalAPIUser.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.backend.internalAPIUser.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.backend.internalAPIUser.override
      - description: Internal endpoint
        displayName: Internal Endpoint
        path: config.backend.internalEndpoint
      - description: Redis data source name
        displayName: Redis DSN
        path: config.backend.redisDSN
      - description: Options for configuring Bugsnag integration
        displayName: Bugsnag
        path: config.bugsnag
      - description: API key
        displayName: APIKey
        path: config.bugsnag.apiKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.bugsnag.apiKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.bugsnag.apiKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.bugsnag.apiKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.bugsnag.apiKey.override
      - description: Extra configuration files to be mounted in the pods
        displayName: Config Files
        path: config.configFiles
      - description: DSN of system's main database
        displayName: Database DSN
        path: config.databaseDSN
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.databaseDSN.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.databaseDSN.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.databaseDSN.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.databaseDSN.override
      - description: Database secret
        displayName: Database Secret
        path: config.databaseSecret
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.databaseSecret.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.databaseSecret.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.databaseSecret.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.databaseSecret.override
      - description: EventsSharedSecret
        displayName: Events Shared Secret
        path: config.eventsSharedSecret
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.eventsSharedSecret.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.eventsSharedSecret.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.eventsSharedSecret.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.eventsSharedSecret.override
      - description: Enable (true) or disable (false) enforcing SSL
        displayName: Force SSL
        path: config.forceSSL
      - description: Options for Github integration
        displayName: Github
        path: config.github
      - description: Client ID
        displayName: Client ID
        path: config.github.clientID
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.github.clientID.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.github.clientID.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.github.clientID.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.github.clientID.override
      - description: Client secret
        displayName: Client Secret
        path: config.github.clientSecret
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.github.clientSecret.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.github.clientSecret.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.github.clientSecret.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.github.clientSecret.override
      - description: Master access token for Apicast
        displayName: Mapping Service Access Token
        path: config.mappingServiceAccessToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.mappingServiceAccessToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.mappingServiceAccessToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.mappingServiceAccessToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.mappingServiceAccessToken.override
      - description: Memcached servers
        displayName: Memcached Servers
        path: config.memcachedServers
      - description: Options for configuring metrics publication
        displayName: Metrics
        path: config.metrics
      - description: Password
        displayName: Password
        path: config.metrics.password
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.metrics.password.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.metrics.password.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.metrics.password.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.metrics.password.override
      - description: User name
        displayName: User
        path: config.metrics.user
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.metrics.user.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.metrics.user.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.metrics.user.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.metrics.user.override
      - description: Rails configuration options for system components
        displayName: Rails
        path: config.rails
      - description: Rails environment
        displayName: Environment
        path: config.rails.environment
      - description: Rails log level (debug, info, warn, error, fatal or unknown)
        displayName: Log Level
        path: config.rails.logLevel
      - description: Holds recaptcha configuration options
        displayName: Recaptcha
        path: config.recaptcha
      - description: Private key
        displayName: Private Key
        path: config.recaptcha.privateKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.recaptcha.privateKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.recaptcha.privateKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.recaptcha.privateKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.recaptcha.privateKey.override
      - description: Public key
        displayName: Public Key
        path: config.recaptcha.publicKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.recaptcha.publicKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.recaptcha.publicKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.recaptcha.publicKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.recaptcha.publicKey.override
      - description: Options for configuring RH Customer Portal integration
        displayName: Red Hat Customer Portal
        path: config.redhatCustomerPortal
      - description: Client ID
        displayName: Client ID
        path: config.redhatCustomerPortal.clientID
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.redhatCustomerPortal.clientID.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.redhatCustomerPortal.clientID.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.redhatCustomerPortal.clientID.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.redhatCustomerPortal.clientID.override
      - description: Client secret
        displayName: Client Secret
        path: config.redhatCustomerPortal.clientSecret
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.redhatCustomerPortal.clientSecret.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.redhatCustomerPortal.clientSecret.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.redhatCustomerPortal.clientSecret.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.redhatCustomerPortal.clientSecret.override
      - description: Redis configuration options
        displayName: Redis
        path: config.redis
      - description: Message bus data source name
        displayName: Message Bus DSN
        path: config.redis.messageBusDSN
      - description: Data source name
        displayName: Queues DSN
        path: config.redis.queuesDSN
      - description: OpenSSL verification mode for sandbox proxy
        displayName: Sandbox Proxy Openssl Verify Mode
        path: config.sandboxProxyOpensslVerifyMode
      - description: SecretKeyBase
        displayName: Secret Key Base
        path: config.secretKeyBase
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.secretKeyBase.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.secretKeyBase.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.secretKeyBase.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.secretKeyBase.override
      - description: System seed
        displayName: Seed
        path: config.seed
      - description: Admin access token
        displayName: Admin Access Token
        path: config.seed.adminAccessToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.seed.adminAccessToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.seed.adminAccessToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.seed.adminAccessToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.seed.adminAccessToken.override
      - description: Admin email address
        displayName: Admin Email
        path: config.seed.adminEmail
      - description: Admin password
        displayName: Admin Password
        path: config.seed.adminPassword
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.seed.adminPassword.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.seed.adminPassword.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.seed.adminPassword.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.seed.adminPassword.override
      - description: Admin user
        displayName: Admin User
        path: config.seed.adminUser
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.seed.adminUser.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.seed.adminUser.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.seed.adminUser.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.seed.adminUser.override
      - description: Master access token
        displayName: Master Access Token
        path: config.seed.masterAccessToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.seed.masterAccessToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.seed.masterAccessToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.seed.masterAccessToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.seed.masterAccessToken.override
      - description: Master domain
        displayName: Master Domain
        path: config.seed.masterDomain
      - description: Master password
        displayName: Master Password
        path: config.seed.masterPassword
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.seed.masterPassword.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.seed.masterPassword.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.seed.masterPassword.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.seed.masterPassword.override
      - description: Master user
        displayName: Master User
        path: config.seed.masterUser
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.seed.masterUser.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.seed.masterUser.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.seed.masterUser.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.seed.masterUser.override
      - description: Tenant name
        displayName: Tenant Name
        path: config.seed.tenantName
      - description: Options for Segment integration
        displayName: Segment
        path: config.segment
      - description: Deletion token
        displayName: Deletion Token
        path: config.segment.deletionToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.segment.deletionToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.segment.deletionToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.segment.deletionToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.segment.deletionToken.override
      - description: Deletion workspace
        displayName: Deletion Workspace
        path: config.segment.deletionWorkspace
      - description: Write key
        displayName: Write Key
        path: config.segment.writeKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.segment.writeKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.segment.writeKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.segment.writeKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.segment.writeKey.override
      - description: SMTP configuration options
        displayName: SMTP
        path: config.smtp
      - description: Address
        displayName: Address
        path: config.smtp.address
      - description: Authentication protocol
        displayName: Auth Protocol
        path: config.smtp.authProtocol
      - description: OpenSSL verify mode
        displayName: Open SSLVerify Mode
        path: config.smtp.opensslVerifyMode
      - description: Password
        displayName: Password
        path: config.smtp.password
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.smtp.password.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.smtp.password.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.smtp.password.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.smtp.password.override
      - description: Port
        displayName: Port
        path: config.smtp.port
      - description: Enable/disable auto STARTTLS
        displayName: STARTTLSAuto
        path: config.smtp.starttlsAuto
      - description: User
        displayName: User
        path: config.smtp.user
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.smtp.user.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.smtp.user.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.smtp.user.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.smtp.user.override
      - description: SSL certificates path
        displayName: SSLCerts Dir
        path: config.sslCertsDir
      - description: 3scale provider plan
        displayName: Threescale Provider Plan
        path: config.threescaleProviderPlan
      - description: 3scale superdomain
        displayName: Threescale Superdomain
        path: config.threescaleSuperdomain
      - description: Zync authentication token
        displayName: Zync Auth Token
        path: config.zyncAuthToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.zyncAuthToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.zyncAuthToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.zyncAuthToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.zyncAuthToken.override
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Sidekiq specific configuration options
        displayName: Sidekiq
        path: sidekiq
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: sidekiq.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: sidekiq.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: sidekiq.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: sidekiq.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: sidekiq.hpa.resourceUtilization
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: sidekiq.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: sidekiq.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: sidekiq.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: sidekiq.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: sidekiq.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: sidekiq.livenessProbe.timeoutSeconds
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: sidekiq.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: sidekiq.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: sidekiq.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: sidekiq.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: sidekiq.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: sidekiq.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: sidekiq.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: sidekiq.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: sidekiq.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: sidekiq.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: sidekiq.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: sidekiq.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: sidekiq.resources.requests
      - description: Sphinx specific configuration options
        displayName: Sphinx
        path: sphinx
      - description: Configuration options for System's sphinx
        displayName: Config
        path: sphinx.config
      - description: Interval used for adding chunks of brand new documents to the primary index at certain intervals without having to do a full re-index
        displayName: Delta Index Interval
        path: sphinx.config.deltaIndexInterval
      - description: Interval used to do a full re-index
        displayName: Full Reindex Interval
        path: sphinx.config.fullReindexInterval
      - description: Thinking configuration for sphinx
        displayName: Thinking
        path: sphinx.config.thinking
      - description: Allows setting the TCP host for Sphinx to a different address
        displayName: Bind Address
        path: sphinx.config.thinking.bindAddress
      - description: Sphinx configuration file path
        displayName: Config File
        path: sphinx.config.thinking.configFile
      - description: Sphinx database path
        displayName: Database Path
        path: sphinx.config.thinking.databasePath
      - description: Sphinx database storage type
        displayName: Database Storage Class
        path: sphinx.config.thinking.databaseStorageClass
      - description: Sphinx database storage size
        displayName: Database Storage Size
        path: sphinx.config.thinking.databaseStorageSize
      - description: Sphinx PID file path
        displayName: PIDFile
        path: sphinx.config.thinking.pidFile
      - description: The TCP port Sphinx will run its daemon on
        displayName: Port
        path: sphinx.config.thinking.port
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: sphinx.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: sphinx.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: sphinx.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: sphinx.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: sphinx.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: sphinx.livenessProbe.timeoutSeconds
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: sphinx.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: sphinx.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: sphinx.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: sphinx.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: sphinx.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: sphinx.readinessProbe.timeoutSeconds
      - description: Resource requirements for the component
        displayName: Resources
        path: sphinx.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: sphinx.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: sphinx.resources.requests
      version: v1alpha1
    - description: Zync is the Schema for the zyncs API
      displayName: Zync
      kind: Zync
      name: zyncs.saas.3scale.net
      specDescriptors:
      - description: Configures the main zync api component
        displayName: API
        path: api
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: api.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: api.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: api.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: api.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: api.hpa.resourceUtilization
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: api.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: api.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: api.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: api.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: api.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: api.livenessProbe.timeoutSeconds
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: api.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: api.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: api.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: api.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: api.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: api.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: api.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: api.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: api.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: api.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: api.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: api.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: api.resources.requests
      - description: Application specific configuration options for the component
        displayName: Config
        path: config
      - description: Options for configuring Bugsnag integration
        displayName: Bugsnag
        path: config.bugsnag
      - description: API key
        displayName: APIKey
        path: config.bugsnag.apiKey
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.bugsnag.apiKey.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.bugsnag.apiKey.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.bugsnag.apiKey.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.bugsnag.apiKey.override
      - description: A reference to the secret holding the database DSN
        displayName: Database DSN
        path: config.databaseDSN
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.databaseDSN.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.databaseDSN.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.databaseDSN.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.databaseDSN.override
      - description: Rails configuration options for zync components
        displayName: Rails
        path: config.rails
      - description: Rails environment
        displayName: Environment
        path: config.rails.environment
      - description: Rails log level (debug, info, warn, error, fatal or unknown)
        displayName: Log Level
        path: config.rails.logLevel
      - description: Rails max threads (only applies to api)
        displayName: Max Threads
        path: config.rails.maxThreads
      - description: A reference to the secret holding the secret-key-base
        displayName: Secret Key Base
        path: config.secretKeyBase
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.secretKeyBase.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.secretKeyBase.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.secretKeyBase.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.secretKeyBase.override
      - description: A reference to the secret holding the zync authentication token
        displayName: Zync Auth Token
        path: config.zyncAuthToken
      - description: VaultSecretReference is a reference to a secret stored in a Hashicorp Vault
        displayName: From Vault
        path: config.zyncAuthToken.fromVault
      - description: The Vault key of the secret
        displayName: Key
        path: config.zyncAuthToken.fromVault.key
      - description: The Vault path where the secret is located
        displayName: Path
        path: config.zyncAuthToken.fromVault.path
      - description: Override allows to directly specify a string value.
        displayName: Override
        path: config.zyncAuthToken.override
      - description: Configures the Grafana Dashboard for the component
        displayName: Grafana Dashboard
        path: grafanaDashboard
      - description: Label key used by grafana-operator for dashboard discovery
        displayName: Selector Key
        path: grafanaDashboard.selectorKey
      - description: Label value used by grafana-operator for dashboard discovery
        displayName: Selector Value
        path: grafanaDashboard.selectorValue
      - description: Image specification for the component
        displayName: Image
        path: image
      - description: Docker repository of the image
        displayName: Name
        path: image.name
      - description: Pull policy for the image
        displayName: Pull Policy
        path: image.pullPolicy
      - description: Name of the Secret that holds quay.io credentials to access the image repository
        displayName: Pull Secret Name
        path: image.pullSecretName
      - description: Image tag
        displayName: Tag
        path: image.tag
      - description: Configures the zync que component
        displayName: Que
        path: que
      - description: Horizontal Pod Autoscaler for the component
        displayName: HPA
        path: que.hpa
      - description: Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        displayName: Max Replicas
        path: que.hpa.maxReplicas
      - description: Lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        displayName: Min Replicas
        path: que.hpa.minReplicas
      - description: Target resource used to autoscale (cpu/memory)
        displayName: Resource Name
        path: que.hpa.resourceName
      - description: A percentage indicating the target resource consumption used to autoscale
        displayName: Resource Utilization
        path: que.hpa.resourceUtilization
      - description: Liveness probe for the component
        displayName: Liveness Probe
        path: que.livenessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: que.livenessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: que.livenessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: que.livenessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: que.livenessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: que.livenessProbe.timeoutSeconds
      - description: Pod Disruption Budget for the component
        displayName: PDB
        path: que.pdb
      - description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        displayName: Max Unavailable
        path: que.pdb.maxUnavailable
      - description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        displayName: Min Available
        path: que.pdb.minAvailable
      - description: Readiness probe for the component
        displayName: Readiness Probe
        path: que.readinessProbe
      - description: Minimum consecutive failures for the probe to be considered failed after having succeeded
        displayName: Failure Threshold
        path: que.readinessProbe.failureThreshold
      - description: Number of seconds after the container has started before liveness probes are initiated
        displayName: Initial Delay Seconds
        path: que.readinessProbe.initialDelaySeconds
      - description: How often (in seconds) to perform the probe
        displayName: Period Seconds
        path: que.readinessProbe.periodSeconds
      - description: Minimum consecutive successes for the probe to be considered successful after having failed
        displayName: Success Threshold
        path: que.readinessProbe.successThreshold
      - description: Number of seconds after which the probe times out
        displayName: Timeout Seconds
        path: que.readinessProbe.timeoutSeconds
      - description: Number of replicas (ignored if hpa is enabled) for the component
        displayName: Replicas
        path: que.replicas
      - description: Resource requirements for the component
        displayName: Resources
        path: que.resources
      - description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Limits
        path: que.resources.limits
      - description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        displayName: Requests
        path: que.resources.requests
      version: v1alpha1
  description: |
    The 3scale SaaS Operator creates and maintains SaaS-ready deployments
    of each component from the Red Hat 3scale API Management solution.

    ## Supported Features

    - **Installer:** A way to install a SaaS ready deployment of the 3scale API Management components, providing configurability options at the time of installation
    - **Reconcilliation:** Tunable CRD parameters for each component after 3scale API Management solution is installed

    ## Supported Components

    - **Apicast**
    - **Autossl**
    - **Backend**
    - **CorsProxy**
    - **MappingService**
    - **System**
    - **Zync**

    ## Documentation

    - [Getting started](https://github.com/3scale/saas-operator/blob/master/docs/getting-started.md)
    - [Custom Resource Definitions reference](https://github.com/3scale/saas-operator/tree/master/docs/reference)
    - [Development](https://github.com/3scale/saas-operator/blob/master/docs/development.md)

    ## License

    3scale SaaS Operator is licensed under the [Apache 2.0 license](https://github.com/3scale/saas-operator/blob/master/LICENSE)
  displayName: 3scale SaaS Operator
  icon:
  - base64data: |
      iVBORw0KGgoAAAANSUhEUgAAADwAAAAoCAYAAACiu5n/AAAACXBIWXMAAATrAAAE6wHYKlsNAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAABp0RVh0VGl0bGUATkdJTlhfUGFydG5lcnNfbG9nb198DJyHAAAHVUlEQVRoge3Ze7DVVRUH8M/v3IsYXJGUEBHx3IsJFVZYlFoivrNETaKpCR9gSlNqYsFh1JQZpwaYwtQmy1fma2LyUVNTmphmWfSYnKkcc3yAomJJl/LeK0L3nt0fa9/u9XDgoh2QHL//nN/ee/1+e+291v7utdbhDWxzTMVVGIl3vbaqbBs0YxDWYCf8FAmfw6wscwSueE20azBOxmoUwqLE4q7DnhiGT+A0/Cr3nbfdtWwAzsI3sReOqzM+B4flsR6Mzv0jheX/7/A34bbjc3s3/AU35vY8HJOfh+ff6fhWfm7B19G2zTVtEKZitj6Fy/g3HhXuPUucayjl3zcJly6LjVqPj24PZf9X/FKQ0wQ8IxYI++Itwnr35+cP4AVclmW+KjxjptiQQ7EQTY1SrrlRH+qH44WCa7H3+krb3lVpKapFajpvyJLHnseULPtusQEjcnuNsOxa4RHnCCtfg6cboVxpYJFXhGWYLBZ0Oqo9qbooMT0xo1p0L8Y0PIlRuBtj5x405tMd88vndM4r34MheFwY4yzhBQ1ZLI1f8G34K+7C4pihqPYNF91YhfvwIg5A5yVTmqcURXGZkq9lwXtxCJ7DCeJsNwSNdOk9xAauwxicikuLavf8VDRtTKnoKZpdKBj8VAzFCtwxdGP3aV2DdlqcVO/K32rDxqzfmCy7w+HngnC+Ldz2RbwVg2vkWvCh/DwHB+XnEcLio/Dx3LcbztV3ve1QuFYs+Eu53es9D2KBYOt34P34DXTOK4/qXFCudC5omztlnyGTcCI+iX/k9y/N31zRKCWLgUW2GiXhfk/l9hRx/RyCJ4TVlorg45R155aHDxpc/Dm/Q+FPQ3ceMrlY+NBGwfI9+Bi+g8txQaOUbBSqeJ+IjYlzWAjF29GR+zugeafS4XoXC8k712/omiTu7z8KS9+KXTRosTSepa8Td2aB68X5vU+EkdcIYjsbmlSfrXm3p9hYPCfO8ESMw97iODQMjXRpOCp/82f9+kaIQKIXE0QY+WBHpfXLRcTV3SmlBbssWXV5v3faBVm1C2bfYTENd+pz16NxZn5uxn7Cgq0opbP3HZzOfE9vXH2EILmd8QVBWDdtJ71fNXrj4am5/Xhu7yMipj+IdLBHuPcgHCmsPg6XCC+Zm9+70Q6OQV5+bx6GMwTz/ljfGZ8tFl4RC7vMphivL6va4XG1yHZgrJcT5L74iXDvo/CYYGWCqC7cTjo2FHuJNPFoYcGF/caOyn3T+/XNwu/E+R22rZRq9LXUH8+IeHglHsBv8UERa7eIfPgpkRwQTP4UukWO/LpA74JPyu3Z/DdDegPbApsNPLoqrWckxeGKtKekRVjmOUW6uWXRqjuz2HDBsvvrO7NrRex8hQgRa3EzDhRJxi0D6LcM78X5+blW9zmCI0aJYOV5kUN/H9/b6gV3LGidUSTfxUWpSKspqoWimXSg5LPVZOKwJSsfEQn/foKR1+ClvAnHC2Iq45/9Pj1GVDseEEHIwVtYbFls3AOC4KbUjJ8h7vwloqjwL8ENbxex93Gi6D8wOua3XdlRabu93lhXpfxY5/y2WWKzOvSRTn/slpU8sqa/IshsnAg8JmxBjQtEoDI+y46rGb9V1L7rYYXNcENdli5K6QnSvfXGkmJdiqhosNjRDXXE2oUFHq3p/5QIFR8Xljt5MwoTlcsb8Ihg+FNqxnffzNxwMe7Ywre3Dmnh6CGdldZ1nZVybxG9HRdt5euThNX3z+3ThQXrlWAnZ9mJuT1HuG1/A90iSsKvqIQ7YLbUVdnnWEqzEkNI5aT4YcvilRcWodA8Uax7SJBFF/6eF/IjkQj0YqmIrw/I7WHi3J+A5TXTXi5KP5Nze9cs+2GRbsrjdwqOWJnnXpvlVuAHr2rBHeePm1iqVg9OqWjB2EL1uGpK03ZZ8uTDWWSs+NtzpCCs4aKMc6ioOz8sCGq1IJhL+33+ZlE46O/azWLDvpIX3otlok42q1/frmJTRud53yySlJniT7lvDLS+AdFRabu9s1JeOoBYSbDx53P7WFFYH1Ujd4xYxK79+qZl2T1qZD+CTsEbA+EqYf1NULdM27mg9b6Cm4YuWnlN7VhJejoVxQixm3eLkutDNWJVPKvvH4WZIsysTfWaBAFOF9WSXtkNNs2Dm0W59iRBZjeIM3x1nSU8re/obPKRTVAkTaTR9cZSMpL0rLhzJ4nronbBJeFm7aImdSKuFGxbixfFpl0nLH28CFp+X0d2fZa9Qdzpk+rpmMfa6w3UL8SntDyVitkdlbbnFWltkdILRanUlFJ6m2RaUSrNyJPfLxL2vfSVcYaJHHg07hEWqYqroqvObKvxa7FxU4UnXJy/X4s1+IU4p3eJCGxV/ka3viLCTH3l4pehLmmlGZo6W9vmlIo0NVFWeEmyQUobi1LptqGLnuh1v93xRUFOI/OEa4U7Xy/O0bUi+5lbb66M5YJVJwuWn7cZuUIU/JeJc/oZEVqOFMHOujz/ckFYPVuY8w28LvEfkWzvtfgS9qMAAAAASUVORK5CYII=
    mediatype: image/png
  install:
    spec:
      deployments: null
    strategy: ""
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: false
    type: AllNamespaces
  keywords:
  - saas
  - 3scale
  - operations
  links:
  - name: GitHub Repository
    url: https://github.com/3scale/saas-operator
  - name: 3scale
    url: https://3scale.net
  maintainers:
  - email: 3scale-operations@redhat.com
    name: 3scale Ops
  maturity: alpha
  provider:
    name: Red Hat
    url: https://www.3scale.net/
  version: 0.0.0
