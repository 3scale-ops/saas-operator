apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: mt-ingress-cert
spec:
  dnsNames: ['*.REPLACE']
  issuerRef:
    kind: ClusterIssuer
    name: selfsigned-cluster-issuer
  secretName: mt-ingress-cert

---
apiVersion: operator.marin3r.3scale.net/v1alpha1
kind: EnvoyDeployment
metadata:
  name: mt-ingress
spec:
  discoveryServiceRef: discoveryservice
  envoyConfigRef: mt-ingress
  image: REPLACE
  ports:
    - name: http
      port: 8080
      protocol: TCP
    - name: https
      port: 8443
      protocol: TCP
    - name: master-tenant
      port: 8081
      protocol: TCP
  adminAccessLogPath: /dev/null
  shutdownManager: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: '*.REPLACE'
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "3"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
  labels:
    app: mt-ingress
  name: mt-ingress
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/component: envoy-deployment
    app.kubernetes.io/instance: mt-ingress
    app.kubernetes.io/managed-by: marin3r-operator
    app.kubernetes.io/name: marin3r
  type: LoadBalancer

---
apiVersion: marin3r.3scale.net/v1alpha1
kind: EnvoyConfig
metadata:
  name: mt-ingress
spec:
  nodeID: mt-ingress
  resources:
    - type: secret
      generateFromTlsSecret: mt-ingress-cert

    - type: listener
      value:
        name: http
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": >-
                    type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  access_log:
                    - name: envoy.access_loggers.file
                      typed_config:
                        "@type": >-
                          type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                        path: /dev/stdout
                  http_filters:
                    - name: envoy.filters.http.router
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  rds:
                    config_source:
                      ads: {}
                      resource_api_version: V3
                    route_config_name: system_app
                  stat_prefix: ingress_http

    - type: listener
      value:
        name: https
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8443
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": >-
                    type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  access_log:
                    - name: envoy.access_loggers.file
                      typed_config:
                        "@type": >-
                          type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                        path: /dev/stdout
                  http_filters:
                    - name: envoy.filters.http.router
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  rds:
                    config_source:
                      ads: {}
                      resource_api_version: V3
                    route_config_name: system_app
                  stat_prefix: ingress_https
            transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                '@type': >-
                  type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                common_tls_context:
                  tls_certificate_sds_secret_configs:
                    - name: mt-ingress-cert
                      sds_config:
                        ads: {}
                        resource_api_version: V3

    - type: cluster
      value:
        name: system_app
        connect_timeout: 1s
        eds_cluster_config:
          eds_config:
            ads: {}
            initial_fetch_timeout: 0s
            resource_api_version: V3
        lb_policy: LEAST_REQUEST
        type: EDS

    - generateFromEndpointSlices:
        clusterName: system_app
        selector:
          matchLabels:
            kubernetes.io/service-name: system-app
        targetPort: http
      type: endpoint

    - type: cluster
      value:
        connect_timeout: 1s
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cors_proxy
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: cors-proxy
                        port_value: 80
        name: cors_proxy
        type: STRICT_DNS

    - type: route
      value:
        name: system_app
        virtual_hosts:
          - domains: ["*"]
            name: multitenant
            routes:
              - match:
                  prefix: /api_docs/proxy
                route:
                  cluster: cors_proxy
                  timeout: 120s
              - match:
                  prefix: /
                request_headers_to_add:
                  - append: false
                    header:
                      # void the app redirect to https
                      key: x-forwarded-proto
                      value: https
                route:
                  cluster: system_app
                  timeout: 120s
