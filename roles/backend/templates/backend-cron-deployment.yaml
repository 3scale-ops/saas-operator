apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-cron
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    app: 3scale-api-management
    threescale_component: backend
    threescale_component_element: cron
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  replicas: {{ cron.replicas | default(cron_replicas) }} 
  selector:
    matchLabels:
      deployment: backend-cron
  template:
    metadata:
      labels:
        app: 3scale-api-management
        deployment: backend-cron
        threescale_component: backend
        threescale_component_element: cron
    spec:
{% if image.pull_secret_name is defined %}
      imagePullSecrets:
        - name: "{{ image.pull_secret_name }}"
{% endif %}
      containers:
        - name: backend-cron
          image: "{{ image.name | default(image_name) }}:{{ image.tag | default(image_tag) }}"
          args:
            - backend-cron
          env:
            - name: CONFIG_REDIS_PROXY
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_URL
            - name: CONFIG_REDIS_SENTINEL_HOSTS
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_SENTINEL_HOSTS
            - name: CONFIG_REDIS_SENTINEL_ROLE
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_SENTINEL_ROLE
            - name: CONFIG_QUEUES_MASTER_NAME
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_URL
            - name: CONFIG_QUEUES_SENTINEL_HOSTS
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_SENTINEL_HOSTS
            - name: CONFIG_QUEUES_SENTINEL_ROLE
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_SENTINEL_ROLE
            - name: RACK_ENV
              valueFrom:
                configMapKeyRef:
                  name: backend-environment
                  key: RACK_ENV
{% if error_monitoring_enabled == true %}
            - name: CONFIG_HOPTOAD_SERVICE
              valueFrom:
                secretKeyRef:
                  name: backend-error-monitoring
                  key: SERVICE
            - name: CONFIG_HOPTOAD_API_KEY
              valueFrom:
                secretKeyRef:
                  name: backend-error-monitoring
                  key: API_KEY
{% endif %}
          resources:
            requests:
              memory: "{{ cron.resources.requests.memory | default(cron_resources_requests_memory) }}"
              cpu: "{{ cron.resources.requests.cpu | default(cron_resources_requests_cpu) }}"
            limits:
              memory: "{{ cron.resources.limits.memory | default(cron_resources_limits_memory) }}"
              cpu: "{{ cron.resources.limits.cpu | default(cron_resources_limits_cpu) }}"
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
