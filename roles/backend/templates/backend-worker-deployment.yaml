apiVersion: apps/v1
kind: Deployment
metadata:  
  name: backend-worker
  namespace: "{{ meta.namespace }}"
  labels:
    app: 3scale-api-management
    threescale_component: backend
    threescale_component_element: worker
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  replicas: {{ worker.replicas | default(worker_replicas) }}
  selector:
    matchLabels:
      deployment: backend-worker
  template:
    metadata:
      labels:
        app: 3scale-api-management
        deployment: backend-worker
        threescale_component: backend
        threescale_component_element: worker
    spec:
{% if image.pull_secret_name is defined %}
      imagePullSecrets:
        - name: "{{ image.pull_secret_name }}"
{% endif %}
      containers:
        - name: backend-worker
          image: "{{ image.name | default(image_name) }}:{{ image.tag | default(image_tag) }}"
          args:
            - bin/3scale_backend_worker
            - run
          ports:
            - name: metrics
              containerPort: 9421
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9421
              scheme: HTTP
            initialDelaySeconds: {{ worker.liveness_probe.initial_delay_seconds | default(worker_liveness_probe_initial_delay_seconds) }}
            timeoutSeconds: {{ worker.liveness_probe.timeout_seconds | default(worker_liveness_probe_timeout_seconds) }}
            periodSeconds: {{ worker.liveness_probe.period_seconds | default (worker_liveness_probe_period_seconds) }}
            successThreshold: {{ worker.liveness_probe.success_threshold | default(worker_liveness_probe_success_threshold) }}
            failureThreshold: {{ worker.liveness_probe.failure_threshold | default(worker_liveness_probe_failure_threshold) }}
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9421
              scheme: HTTP
            initialDelaySeconds: {{ worker.readiness_probe.initial_delay_seconds | default(worker_readiness_probe_initial_delay_seconds) }}
            timeoutSeconds: {{ worker.readiness_probe.timeout_seconds | default(worker_readiness_probe_timeout_seconds) }}
            periodSeconds: {{ worker.readiness_probe.period_seconds | default (worker_readiness_probe_period_seconds) }}
            successThreshold: {{ worker.readiness_probe.success_threshold | default(worker_readiness_probe_success_threshold) }}
            failureThreshold: {{ worker.readiness_probe.failure_threshold | default(worker_readiness_probe_failure_threshold) }}
          env:
            - name: CONFIG_REDIS_PROXY
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_URL
            - name: CONFIG_REDIS_SENTINEL_HOSTS
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_SENTINEL_HOSTS
            - name: CONFIG_REDIS_SENTINEL_ROLE
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_SENTINEL_ROLE
            - name: CONFIG_QUEUES_MASTER_NAME
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_URL
            - name: CONFIG_QUEUES_SENTINEL_HOSTS
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_SENTINEL_HOSTS
            - name: CONFIG_QUEUES_SENTINEL_ROLE
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_SENTINEL_ROLE
            - name: RACK_ENV
              valueFrom:
                configMapKeyRef:
                  name: backend-environment
                  key: RACK_ENV
            - name: CONFIG_WORKERS_LOGGER_FORMATTER
              value: "{{ worker.env.log_format | default(worker_env_log_format) }}"
            - name: CONFIG_MASTER_SERVICE_ID
              valueFrom:
                configMapKeyRef:
                  name: backend-environment
                  key: MASTER_SERVICE_ID
            - name: CONFIG_REDIS_ASYNC
              value: "{{ worker.env.redis_async | default(worker_env_redis_async) }}"
            - name: CONFIG_EVENTS_HOOK
              valueFrom:
                secretKeyRef:
                  name: backend-system-events-hook
                  key: URL
            - name: CONFIG_EVENTS_HOOK_SHARED_SECRET
              valueFrom:
                secretKeyRef:
                  name: backend-system-events-hook
                  key: PASSWORD
            - name: CONFIG_WORKER_PROMETHEUS_METRICS_PORT
              value: '9421'
            - name: CONFIG_WORKER_PROMETHEUS_METRICS_ENABLED
              value: 'true'
{% if error_monitoring_enabled == true %}
            - name: CONFIG_HOPTOAD_SERVICE
              valueFrom:
                secretKeyRef:
                  name: backend-error-monitoring
                  key: SERVICE
            - name: CONFIG_HOPTOAD_API_KEY
              valueFrom:
                secretKeyRef:
                  name: backend-error-monitoring
                  key: API_KEY
{% endif %}
          resources:
            requests:
              memory: "{{ worker.resources.requests.memory | default(worker_resources_requests_memory) }}"
              cpu: "{{ worker.resources.requests.cpu | default(worker_resources_requests_cpu) }}"
            limits:
              memory: "{{ worker.resources.limits.memory | default(worker_resources_limits_memory) }}"
              cpu: "{{ worker.resources.limits.cpu | default(worker_resources_limits_cpu) }}"
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
