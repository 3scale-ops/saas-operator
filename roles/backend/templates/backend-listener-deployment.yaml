apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-listener
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    app: 3scale-api-management
    threescale_component: backend
    threescale_component_element: listener
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
{% if listener.hpa.enabled is defined and listener.hpa.enabled == false %}
  replicas: {{ listener.replicas | default(listener_replicas) }}
{% endif %}
  selector:
    matchLabels:
      deployment: backend-listener
  template:
    metadata:
      labels:
        app: 3scale-api-management
        deployment: backend-listener
        threescale_component: backend
        threescale_component_element: listener
{% if listener.marin3r.enabled == true %}
        marin3r.3scale.net/status: "enabled"
{% if listener.marin3r.annotations is defined %}
      annotations:
{# This is a hack to reverse the ansible operator -/_ convertion of dict keys #}
{%- for key in listener.marin3r.annotations -%}
{% set key_replace = key | replace('_','-') %}
        {{ key_replace }}: {{ listener.marin3r.annotations[key] | safe }}
{% endfor %}
{% endif %}
{% else %}
        marin3r.3scale.net/status: "disabled"
{% endif %}
    spec:
{% if image.pull_secret_name is defined %}
      imagePullSecrets:
        - name: "{{ image.pull_secret_name }}"
{% endif %}
      containers:
        - name: backend-listener
          image: "{{ image.name | default(image_name) }}:{{ image.tag | default(image_tag) }}"
          args:
            - bin/3scale_backend
            - start
            - '-e'
            - production
            - '-p'
            - '3000'
            - '-x'
            - /dev/stdout
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9394
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: {{ listener.liveness_probe.initial_delay_seconds | default(listener_liveness_probe_initial_delay_seconds) }}
            timeoutSeconds: {{ listener.liveness_probe.timeout_seconds | default(listener_liveness_probe_timeout_seconds) }}
            periodSeconds: {{ listener.liveness_probe.period_seconds | default (listener_liveness_probe_period_seconds) }}
            successThreshold: {{ listener.liveness_probe.success_threshold | default(listener_liveness_probe_success_threshold) }}
            failureThreshold: {{ listener.liveness_probe.failure_threshold | default(listener_liveness_probe_failure_threshold) }}
          readinessProbe:
            httpGet:
              path: /status
              port: 3000
              scheme: HTTP
            initialDelaySeconds: {{ listener.readiness_probe.initial_delay_seconds | default(listener_readiness_probe_initial_delay_seconds) }}
            timeoutSeconds: {{ listener.readiness_probe.timeout_seconds | default(listener_readiness_probe_timeout_seconds) }}
            periodSeconds: {{ listener.readiness_probe.period_seconds | default (listener_readiness_probe_period_seconds) }}
            successThreshold: {{ listener.readiness_probe.success_threshold | default(listener_readiness_probe_success_threshold) }}
            failureThreshold: {{ listener.readiness_probe.failure_threshold | default(listener_readiness_probe_failure_threshold) }}
          env:
            - name: CONFIG_REDIS_PROXY
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_URL
            - name: CONFIG_REDIS_SENTINEL_HOSTS
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_SENTINEL_HOSTS
            - name: CONFIG_REDIS_SENTINEL_ROLE
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_STORAGE_SENTINEL_ROLE
            - name: CONFIG_QUEUES_MASTER_NAME
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_URL
            - name: CONFIG_QUEUES_SENTINEL_HOSTS
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_SENTINEL_HOSTS
            - name: CONFIG_QUEUES_SENTINEL_ROLE
              valueFrom:
                secretKeyRef:
                  name: backend-redis
                  key: REDIS_QUEUES_SENTINEL_ROLE
            - name: RACK_ENV
              valueFrom:
                configMapKeyRef:
                  name: backend-environment
                  key: RACK_ENV
            - name: CONFIG_REQUEST_LOGGERS
              value: "{{ listener.env.log_format | default(listener_env_log_format) }}"
            - name: CONFIG_LEGACY_REFERRER_FILTERS
              valueFrom:
                configMapKeyRef:
                  name: backend-environment
                  key: LEGACY_REFERRER_FILTERS
            - name: CONFIG_OAUTH_MAX_TOKEN_SIZE
              valueFrom:
                configMapKeyRef:
                  name: backend-environment
                  key: OAUTH_MAX_TOKEN_SIZE
            - name: CONFIG_REDIS_ASYNC
              value: "{{ listener.env.redis_async | default(listener_env_redis_async) }}"
            - name: LISTENER_WORKERS
              value: '{{ listener.env.listener_workers | default(listener_env_listener_workers) }}'
            - name: CONFIG_INTERNAL_API_USER
              valueFrom:
                secretKeyRef:
                  name: backend-internal-api
                  key: username
            - name: CONFIG_INTERNAL_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backend-internal-api
                  key: password
            - name: CONFIG_LISTENER_PROMETHEUS_METRICS_ENABLED
              value: 'true'
{% if error_monitoring_enabled == true %}
            - name: CONFIG_HOPTOAD_SERVICE
              valueFrom:
                secretKeyRef:
                  name: backend-error-monitoring
                  key: SERVICE
            - name: CONFIG_HOPTOAD_API_KEY
              valueFrom:
                secretKeyRef:
                  name: backend-error-monitoring
                  key: API_KEY
{% endif %}
          resources:
            requests:
              memory: "{{ listener.resources.requests.memory | default(listener_resources_requests_memory) }}"
              cpu: "{{ listener.resources.requests.cpu | default(listener_resources_requests_cpu) }}"
            limits:
              memory: "{{ listener.resources.limits.memory | default(listener_resources_limits_memory) }}"
              cpu: "{{ listener.resources.limits.cpu | default(listener_resources_limits_cpu) }}"
          imagePullPolicy: IfNotPresent
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  deployment: backend-listener
          - weight: 99
            podAffinityTerm:
              topologyKey: failure-domain.beta.kubernetes.io/zone
              labelSelector:
                matchLabels:
                  deployment: backend-listener
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
