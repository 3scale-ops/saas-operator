apiVersion: apps/v1
kind: Deployment
metadata:
  name: "apicast-{{ apicast_env }}"
  namespace: "{{ meta.namespace }}"
  labels:
    app: 3scale-api-management
    threescale_component: "apicast-{{ apicast_env }}"
    threescale_component_element: gateway
spec:
  selector:
    matchLabels:
      deployment: "apicast-{{ apicast_env }}"
  strategy:
    rollingUpdate:
      # Never go below desired, increase the
      # max number of pods instead
      maxSurge: 1
      maxUnavailable: 0
{% if vars[apicast_env].hpa.enabled is defined and vars[apicast_env].hpa.enabled == false %}
  replicas: {{ vars[apicast_env].replicas | default(replicas) }}
{% endif %}
  template:
    metadata:
      labels:
        deployment: "apicast-{{ apicast_env }}"
        app: 3scale-api-management
        threescale_component: "apicast-{{ apicast_env }}"
        threescale_component_element: gateway
{% if vars[apicast_env].marin3r.enabled == true %}
        marin3r.3scale.net/status: "enabled"
{% if vars[apicast_env].marin3r.annotations is defined %}
      annotations:
{# This is a hack to reverse the ansible operator -/_ convertion of dict keys #}
{%- for key in vars[apicast_env].marin3r.annotations -%}
{% set key_replace = key | replace('_','-') %}
        {{ key_replace }}: {{ vars[apicast_env].marin3r.annotations[key] | safe }}
{% endfor %}
{% endif %}
{% else %}
        marin3r.3scale.net/status: "disabled"
{% endif %}
    spec:
{% if image.pull_secret_name is defined %}
      imagePullSecrets:
        - name: "{{ vars[apicast_env].image.pull_secret_name }}"
{% endif %}
      containers:
        - name: apicast
          image: "{{ vars[apicast_env].image.name | default(image_name) }}:{{ vars[apicast_env].image.tag | default(image_tag) }}"
          ports:
            - name: gateway
              containerPort: 8080
            - name: management
              containerPort: 8090
            - name: metrics
              containerPort: 9421
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: APICAST_CONFIGURATION_LOADER
              value: lazy
            - name: APICAST_CONFIGURATION_CACHE
              value: "{{ vars[apicast_env].env.apicast_configuration_cache }}"
            - name: APICAST_EXTENDED_METRICS
              value: "true"
            - name: THREESCALE_DEPLOYMENT_ENV
              value: "{{ apicast_env }}"
            - name: THREESCALE_PORTAL_ENDPOINT
              value: "{{ vars[apicast_env].env.threescale_portal_endpoint }}"
            - name: APICAST_LOG_LEVEL
              value: "{{ vars[apicast_env].env.apicast_log_level | default(apicast_log_level) }}"
            - name: APICAST_OIDC_LOG_LEVEL
              value: "{{ vars[apicast_env].env.apicast_oidc_log_level | default(apicast_oidc_log_level) }}"
            - name: APICAST_RESPONSE_CODES
              value: "true"
          resources:
            requests:
              memory: "{{ vars[apicast_env].resources.requests.memory | default(resources_requests_memory) }}"
              cpu: "{{ vars[apicast_env].resources.requests.cpu | default(resources_requests_cpu) }}"
            limits:
              memory: "{{ vars[apicast_env].resources.limits.memory | default(resources_limits_memory) }}"
              cpu: "{{ vars[apicast_env].resources.limits.cpu | default(resources_limits_cpu) }}"
          livenessProbe:
            tcpSocket:
              port: gateway
            initialDelaySeconds: {{ vars[apicast_env].liveness_probe.initial_delay_seconds | default(liveness_probe_initial_delay_seconds) }}
            timeoutSeconds: {{ vars[apicast_env].liveness_probe.timeout_seconds | default(liveness_probe_timeout_seconds) }}
            periodSeconds: {{ vars[apicast_env].liveness_probe.period_seconds | default (liveness_probe_period_seconds) }}
            successThreshold: {{ vars[apicast_env].liveness_probe.success_threshold | default(liveness_probe_success_threshold) }}
            failureThreshold: {{ vars[apicast_env].liveness_probe.failure_threshold | default(liveness_probe_failure_threshold) }}
          readinessProbe:
            httpGet:
              path: /status/ready
              port: management
              scheme: HTTP
            initialDelaySeconds: {{ vars[apicast_env].readiness_probe.initial_delay_seconds | default(readiness_probe_initial_delay_seconds) }}
            timeoutSeconds: {{ vars[apicast_env].readiness_probe.timeout_seconds | default(readiness_probe_timeout_seconds) }}
            periodSeconds: {{ vars[apicast_env].readiness_probe.period_seconds | default (readiness_probe_period_seconds) }}
            successThreshold: {{ vars[apicast_env].readiness_probe.success_threshold | default(readiness_probe_success_threshold) }}
            failureThreshold: {{ vars[apicast_env].readiness_probe.failure_threshold | default(readiness_probe_failure_threshold) }}

